generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employer {
  id          String      @id @unique @default(uuid())
  directionId String
  userId      String      @unique
  direction   Direction   @relation(fields: [directionId], references: [id], onDelete: Cascade)
  user        Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Visite {
  id                     String        @id @unique @default(uuid())
  visiteurId             String
  heureEntrer            DateTime
  heureEntrerDestination DateTime?
  heureSortirDestination DateTime?
  heureSortir            DateTime?
  typeVisite             typeVisite
  utilisateurId          String
  receptionisteId        String        @unique
  directionId            String
  direction              Direction     @relation(fields: [directionId], references: [id])
  utilisateur            Utilisateur   @relation(fields: [utilisateurId], references: [id])
  receptioniste          Recepcioniste @relation(fields: [receptionisteId], references: [id])
  visiteur               Visiteur      @relation(fields: [visiteurId], references: [id])
}
enum typeVisite {
  personal
  entreprise
  
}

model Direction {
  id         String      @id @unique @default(uuid())
  nom        String
  brancheId  String
  branche    Branche     @relation(fields: [brancheId], references: [id], onDelete: Cascade)
  Directeur  Directeur?
  Employers  Employer[]
  visites    Visite[]
  Secretaire Secretaire?

  @@unique(fields: [brancheId, nom])
  @@index([brancheId, nom])
}

model Secretaire {
  id          String      @id @unique @default(uuid())
  userId      String      @unique
  directionId String      @unique
  direction   Direction   @relation(fields: [directionId], references: [id])
  user        Utilisateur @relation(fields: [userId], references: [id])
}

model Utilisateur {
  id            String         @id @unique @default(uuid())
  firstName     String
  lastName      String
  email         String         @unique
  password      String
  brancheId     String         
  branche       Branche        @relation(fields: [brancheId], references: [id], onDelete: Cascade)
  directeur     Directeur?
  employer      Employer?
  recepcioniste Recepcioniste?
  secretaire    Secretaire?
  visites       Visite[]

  @@index([firstName, lastName])
}

model Branche {
  id            String          @id @unique @default(uuid())
  nom           String          @unique
  adresse       String
  wilaya        String
  direction     Direction[]
  recepcioniste Recepcioniste[]
  Utilisateur   Utilisateur[]
}

model Visiteur {
  id         String   @id @unique @default(uuid())
  firstName  String
  lastName   String
  adresse    String
  typePiece  TypePiece
  idPiece    String   @unique
  entreprise String?
  visites    Visite[]

  @@index([firstName, lastName])
}
enum TypePiece {
  passport
  carteID
  permisConduite
}

model Recepcioniste {
  id        String      @id @unique @default(uuid())
  userId    String      @unique
  brancheId String
  branche   Branche     @relation(fields: [brancheId], references: [id])
  user      Utilisateur @relation(fields: [userId], references: [id])
  visites   Visite[]
}

model Directeur {
  id          String      @id @unique @default(uuid())
  userId      String      @unique
  directionId String      @unique
  direction   Direction   @relation(fields: [directionId], references: [id])
  user        Utilisateur @relation(fields: [userId], references: [id])
}
